{"name":"Githubtutorial","tagline":"Tutorial","body":"## Что такое Git?\r\n**Git** - свободная и с открытым исходным кодом распределенная система контроля версий, предназначенная для обработки *всех*, от маленьких до очень больших проектов с **высокой скоростью и эффективностью**.\r\n\r\n## Краткое руководство\r\n### Скачиваем Git по ссылки: http://git-scm.com/\r\n\r\n- Далее устанавливаем его;\r\n- Затем заходим на **сайт**: https://github.com/ и регистрируемся там;\r\n- Далее входим в личный кабинет и создаем новый репозиторий, нажав на кнопку \r\n**New Repository**;\r\n- Далее заполняем данные и нажимаем **Create Repository**;\r\n\r\n## Создаем папку для репозитория\r\n\r\n**Далее** создаем папку на любом диски. (Например C:\\Example);\r\n- Запускаем программу git bash(Пуск->Все программы->Git);\r\n- Переходим в нужную нам папку: (Папка и диск могут быть **другие**) \r\n```\r\ncd C:\r\ncd Example \r\n```\r\n\r\n**Далее** выполняем следующие команды\r\n* **touch** - создаем файл\r\n```\r\ntouch README.md\r\n```\r\n* **git init** - инициализируем репозиторий.\r\n``` \r\n$ git init\r\n```\r\n\r\n* **git add file.txt** - добавляем файл.\r\n```\r\n$ git add README.md\r\n```\r\nПри возникновении ошибки: \r\n\r\nfatal: LF would be replaced by CRLF in file.txt\r\n\r\n**Нужно ввести команды:** \r\n``` \r\n$ git  config  --global  core.autocrlf  false\r\n\r\n$ git  config  --global  core.safecrlf  false\r\n```\r\n\r\n* **git commit -m \"Initial commit\"** - сохраняем изменения c пометкой \"Initial commit\".\r\n``` \r\n$ git commit -m \"Initial commit\" \r\n```\r\n\r\n* **git remote add origin https://github.com/Путь_к_вашему_репозиторию.git** - добавление вашего локального репозитория и связывание его с текущей папкой(Путь к репозиторию можно **скопировать на сайт** зайдя в папку с проектом).\r\n```\r\ngit remote add origin htttps://githun.com/Путь_к_вашему_репозиторию.git\r\n```\r\n\r\n**Далее**, если всё правильно, нужно закинуть ваши данные на локальный репозиторий.\r\n\r\nЭто делается с помощью: \r\n* **git push -u origin master** - закидываем данные.\r\n```\r\ngit push -u origin master\r\n```\r\n**Ну вот и всё!** Далее можно создавать любые файлы и добавлять их на свой репозиторий.\r\nИспользуя для это: **git add**, **git commmit** и **git push**\r\n\r\n# Полезные команды\r\n\r\n## Настройка\r\n\r\n### Указать глобальный username:\r\n```\r\n$ git config --global user.name \"John Doe\"\r\n```\r\n### Указать глобальный user email:\r\n```\r\n$ git config --global user.email johndoe@example.com\r\n```\r\n### Указать редактор, который будет использоваться, когда нужно ввести сообщение в Git:\r\n```\r\n$ git config --global core.editor emacs\r\n```\r\n### Указать утилиту сравнения, которая будет использоваться для разрешения конфликтов слияния:\r\n```\r\n$ git config --global merge.tool vimdiff\r\n```\r\n### Просмотреть используемые настройки:\r\n```\r\n$ git config --list\r\n```\r\n\r\n## Работа с репозиторием\r\n\r\n### Инициализировать репозиторий:\r\n```\r\n$ git init\r\n```\r\n### Показать статус репозитория:\r\n```\r\n$ git status\r\n```\r\n### Коммитит с указанием комментария:\r\n```\r\n$ git commit -m 'some entry script fixes'\r\n```\r\n### Коммитит с указанием комментария и автоматической индексацией:\r\n```\r\n$git commit -a -m 'some entry script fixes'\r\n```\r\n### Добавить файл в индекс:\r\n```\r\n$ git add index.php\r\n```\r\n### Посмотреть изменения между рабочим каталогом и индексом:\r\n```\r\n$ git diff\r\n```\r\n### Посмотреть изменения между последним коммитом и индексом:\r\n```\r\n$ git diff --cached\r\n```\r\n### Удалить файл из индекса и из рабочего каталога:\r\n```\r\n$ git rm readme.txt\r\n```\r\n### Удалить файл из индекса, оставив его при этом в рабочем каталоге:\r\n```\r\n$ git rm --cached readme.txt\r\n```\r\n### Исключить файл (который находится в индексе, но еще не за коммитен) из индексации:\r\n```\r\n$ git reset HEAD readme.txt\r\n```\r\n### Просмотр истории коммитов:\r\n```\r\n$ git log\r\n```\r\n### Просмотр истории коммитов в GUI:\r\n```\r\n$ gitk\r\n```\r\n\r\n## Работа с удаленным сервером\r\n\r\n### Просмотреть какие удалённые серверы уже настроены, параметр -v отображает так же url сервера:\r\n```\r\n$ git remote -v\r\n```\r\n### Добавить новый удалённый репозиторий под именем pb:\r\n```\r\n$ git remote add pb git://github.com/paulboone/ticgit.git\r\n```\r\n### Посмотреть список коммитов репозитория pb ветки master, которые были выполнены после последнего pull-а:\r\n```\r\ngit log pb/master\r\n```\r\n### Извлечь (fetch) всю информацию, которая есть в репозитории pb:\r\n```\r\n$ git fetch pb\r\n```\r\n### Слить (merge) информацию, которую получили через fetch с рабочим каталогом:\r\n```\r\n$ git merge pb/master\r\n```\r\n### Отправить (push) код в ветку master удаленного репозитория pb:\r\n```\r\n$ git push pb master\r\n```\r\n### Переименовать удаленный репозиторий из pb на paul:\r\n```\r\n$ git remote rename pb paul\r\n```\r\n### Удалить удаленный репозиторий paul:\r\n```\r\n$ git remote rm paul\r\n```\r\n\r\n## Работа с метками\r\n\r\n### Просмотр имеющихся меток:\r\n```\r\n$ git tag\r\n```\r\n### Создание аннотированной метки:\r\n```\r\n$ git tag -a v1.4 -m 'my version 1.4'\r\n```\r\n### Создание легковесной метки:\r\n```\r\n$ git tag v1.4\r\n```\r\n### Просмотр данных метки:\r\n```\r\n$ git show v1.4\r\n```\r\n### Создание метки для какого-либо существующего коммита (9fceb02 - контрольная сумма коммита, или ее часть):\r\n```\r\n$ git tag -a v1.2 9fceb02\r\n```\r\n### Отправить метку на удалённый сервер:\r\n```\r\n$ git push pb v1.5\r\n```\r\n\r\n## Работа с ветками\r\n\r\n### Отобразить список веток проекта:\r\n```\r\n$ git branch\r\n```\r\n### Отобразить список веток с последними коммитами:\r\n```\r\n$ git branch -v\r\n```\r\n### Создать новую ветку с названием \"iss53\":\r\n```\r\n$ git branch iss53\r\n```\r\n### Переключиться на ветку iss53:\r\n```\r\n$ git checkout iss53\r\n```\r\n### Создать ветку с названием \"iss53\" и переключиться на нее:\r\n```\r\n$ git checkout -b iss53\r\n```\r\n### Создать ветку с названием \"articles\" на основе ветки \"articles\" из удаленного сервера pb и переключиться на нее:\r\n```\r\ngit checkout -b articles pb/articles\r\n```\r\n### Слить текущую ветку с веткой hotfix:\r\n```\r\n$ git merge hotfix\r\n```\r\n### Переименовать ветку \"articles\" в \"content\":\r\n```\r\n$ git branch -m articles content\r\n```\r\n### Удалить ветку hotfix:\r\n```\r\n$ git branch -d hotfix\r\n```\r\n### Удалить ветку hotfix на удаленном сервере pb:\r\n```\r\n$ git push pb :hotfix\r\n```\r\n### Запустить графический инструмент для отображения конфликтных ситуаций:\r\n```\r\n$ git mergetool\r\n```\r\n### Посмотреть список веток, которые уже слиты с текущей:\r\n```\r\n$ git branch --merged\r\n```\r\n### Посмотреть список веток, которые содержат наработки, но еще не слиты с текущей:\r\n```\r\n$ git branch --no-merged\r\n```\r\n\r\n## Как получить помощь? ##\r\n\r\nЕсли вам нужна помощь при использовании Git'а, есть три способа открыть страницу руководства по любой команде Git'а:\r\n\r\n\t$ git help <команда>\r\n\t$ git <команда> --help\r\n\t$ man git-<команда>\r\n\r\nНапример, так можно открыть руководство по команде config:\r\n\r\n\t$ git help config\r\n\r\n## Дальнейшее изучение Git\r\n**Очень рекомендую книгу**: https://github.com/progit/progit/\r\nВ разделе ru - русская весрия.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}