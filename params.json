{"name":"Githubtutorial","tagline":"Tutorial","body":"#Руководство по использованию git\r\n## Что такое Git?\r\n**Git** - свободная и с открытым исходным кодом распределенная система контроля версий, предназначенная для обработки *всех*, от маленьких до очень больших проектов с **высокой скоростью и эффективностью**.\r\n\r\n## Краткое руководство\r\n### Скачиваем Git по ссылки: http://git-scm.com/\r\n\r\n- Далее устанавливаем его;\r\n- Затем заходим на **сайт**: https://github.com/ и регистрируемся там;\r\n- Далее входим в личный кабинет и создаем новый репозиторий, нажав на кнопку \r\n**New Repository**;\r\n- Далее заполняем данные и нажимаем **Create Repository**;\r\n\r\n## Создаем папку для репозитория\r\n\r\n**Далее** создаем папку на любом диски. (Например C:\\Example);\r\n- Запускаем программу git bash(Пуск->Все программы->Git);\r\n- Переходим в нужную нам папку: (Папка и диск могут быть **другие**) \r\n```\r\ncd C:\r\ncd Example \r\n```\r\n\r\n**Далее** выполняем следующие команды\r\n* **touch** - создаем файл\r\n```\r\ntouch README.md\r\n```\r\n* **git init** - инициализируем репозиторий.\r\n``` \r\n$ git init\r\n```\r\n\r\n* **git add file.txt** - добавляем файл.\r\n```\r\n$ git add README.md\r\n```\r\nПри возникновении ошибки: \r\n\r\nfatal: LF would be replaced by CRLF in file.txt\r\n\r\n**Нужно ввести команды:** \r\n``` \r\n$ git  config  --global  core.autocrlf  false\r\n\r\n$ git  config  --global  core.safecrlf  false\r\n```\r\n\r\n* **git commit -m \"Initial commit\"** - сохраняем изменения c пометкой \"Initial commit\".\r\n``` \r\n$ git commit -m \"Initial commit\" \r\n```\r\n\r\n* **git remote add origin https://github.com/Путь_к_вашему_репозиторию.git** - добавление вашего локального репозитория и связывание его с текущей папкой(Путь к репозиторию можно **скопировать на сайт** зайдя в папку с проектом).\r\n```\r\ngit remote add origin htttps://githun.com/Путь_к_вашему_репозиторию.git\r\n```\r\n\r\n**Далее**, если всё правильно, нужно закинуть ваши данные на локальный репозиторий.\r\n\r\nЭто делается с помощью: \r\n* **git push -u origin master** - закидываем данные.\r\n```\r\ngit push -u origin master\r\n```\r\n**Ну вот и всё!** Далее можно создавать любые файлы и добавлять их на свой репозиторий.\r\nИспользуя для это: **git add**, **git commmit** и **git push**\r\n\r\n## Полезные команды\r\n* **git status** - выводит текущее состояние проекта.\r\n``` \r\n$ git status \r\n```\r\n\r\n* **git add** '*.txt' - шаблон для добавления всех файлов с разрешением .txt.\r\n``` \r\n$ git add '*.txt' \r\n```\r\n\r\n* **git log** - журнал всех изменений.\r\n``` \r\n$ git log \r\n```\r\n\r\n## Использование \r\n```\r\ngit [--version] [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]\r\n           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]\r\n           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]\r\n           [-c name=value] [--help]\r\n           &lt;command&gt; [&lt;args&gt;]\r\n```\r\n\r\nНаиболее **часто** используемые команды git:\r\n```\r\n   add        Add file contents to the index\r\n   bisect     Find by binary search the change that introduced a bug\r\n   branch     List, create, or delete branches\r\n   checkout   Checkout a branch or paths to the working tree\r\n   clone      Clone a repository into a new directory\r\n   commit     Record changes to the repository\r\n   diff       Show changes between commits, commit and working tree, etc\r\n   fetch      Download objects and refs from another repository\r\n   grep       Print lines matching a pattern\r\n   init       Create an empty git repository or reinitialize an existing one\r\n   log        Show commit logs\r\n   merge      Join two or more development histories together\r\n   mv         Move or rename a file, a directory, or a symlink\r\n   pull       Fetch from and merge with another repository or a local branch\r\n   push       Update remote refs along with associated objects\r\n   rebase     Forward-port local commits to the updated upstream head\r\n   reset      Reset current HEAD to the specified state\r\n   rm         Remove files from the working tree and from the index\r\n   show       Show various types of objects\r\n   status     Show the working tree status\r\n   tag        Create, list, delete or verify a tag object signed with GPG\r\n```\r\n\r\nСмотрите 'git help &lt;command&gt;' для больше информации о **других** командах.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}